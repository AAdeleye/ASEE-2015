******ASEE Software Team TODO List*******

This is our TODO list. Feel free to delete things off here once they are completed, or add things here you think need doing.

***********************
General:
-Make a BinSystem library that manages the bins
-Make the "main sketch", includes all the libraries we've made into one package so we can test everything. AKA The Final Product
-Update UML on wiki to match our current software design

***************************
Track Test Run

-Test our sketch around the track, stopping briefly at each fish (4 sec)
--Fill out correct array times to stop the right amount of time

Learned some things:
-Robot wiggles and doesn't line up the same way every time. This is a big deal, as having
	the robot line up correctly with the fish is essential to being able to pick up 
	the fish. It also affects how far we need to rotate for the next fish.
-Possible Solutions:
--1) Test PID to see if it's sufficient
--2) Slow robot down when it gets close to fish, so last second corrections to line it up in the center are minor.
--3) Get encoders

-It's annoying to manually adjust the preset times of how long to rotate after the robot
	has picked up a fish, and minor variations could affect how long the robot
	should rotate.
-Alternatives to using preset times:
--1) Gyro - rotate to a certain angle
--2) Pixy - rotate until the next fish you want is in view

**************************
Conveyor Library:
-Conveyor.h
--add comment to functions, classes, enums, and variables

-Test Sketch
--make one that tests all functions of this library

**************************
Drivetrain Library: 

-Tune PID controller so it works perfectly(or close)

**************************
Visual Sensor Library: 


**************************
Stop using delay() in programs and functions in libraries

-delay() causes the program to stop for a specified amount of time.
	This means the program is required to do something until the amount of time has
	passed. So we can't do multiple things at once(like picking up a fish AND 
	rotating the robot) if we use delay(). Found an	alternative to delay here: 
	http://playground.arduino.cc/Code/AvoidDelay